{"posts":[{"title":"css三种添加方法","text":"css 的添加方式分为三种分别是 行内添加， 内嵌样式，单独文件 行内添加 123456789101112&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 style=&quot;color: blue;&quot;&gt;ha ha ha!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 内嵌样式 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; h1{ color: blue; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;ha ha ha!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 单独文件","link":"/2022/08/12/css%E4%B8%89%E7%A7%8D%E6%B7%BB%E5%8A%A0%E6%96%B9%E6%B3%95/"},{"title":"Algorithm","text":"algorithm头文件下的常用函数 常用函数有以下几种： max(x,y) 求两个数之中较大的那个 min(x,y) 求两个数中较小的那个 abs(x) 返回一个整数的绝对值这三种函数的使用样例如下： 12345678910111213#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int main(){ int n = -5; int m = 2; cout &lt;&lt; max(n,m) &lt;&lt; endl; cout &lt;&lt; min(n,m) &lt;&lt; endl; cout &lt;&lt; abs(n) &lt;&lt; &quot; &quot; &lt;&lt; abs(m) &lt;&lt; endl; return 0;} 输出结果为：2-55 2 swap(x,y) 交换两个变量的值 12345678910111213#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int main(){ int n = -5; int m = 2; cout &lt;&lt; n &lt;&lt; &quot; &quot; &lt;&lt; m &lt;&lt; endl; swap(n,m); //将 n 和 m 的值互换了 cout &lt;&lt; n &lt;&lt; &quot; &quot; &lt;&lt; m &lt;&lt; endl; return 0;} 输出结果为：-5 22 -5 reverse(it,it2) reverse(it,it2) 可以将数组指针在[it,it1)之间的元素或迭代器在[it,it1)范围内的元素进行反转。也可以对容器中的元素进行这样的操作例如：string 123456789101112#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int main(){ int arr[5] = {1,2,3,4,5}; // reverse(arr,arr + 2); //将[arr,arr + 2)范围内的元素进行了反转 for(int i = 0;i &lt; 5;i++) cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;; return 0;} 输出结果为：2 1 3 4 5 next-permutation() 给出一个序列在全排列下的下一个序列 12345678910#include &lt;bits/stdc++.h&gt;using namespace std;int main(){ int arr[5] = {1,2,3,4,5}; do{ printf(&quot;%d %d %d\\n&quot;,arr[0],arr[1],arr[2]); }while(next_permutation(arr,arr+3)); //将数组前三位赋值成了全排列中的下一列 return 0 ;} 输出结果为：1 3 22 1 32 3 13 1 23 2 1 fill() 可以把数组或容器中的某一段区域赋为一个相同的值 12345678910#include &lt;bits/stdc++.h&gt;using namespace std;int main(){ int arr[5]; fill(arr,arr+5,250); //将所有值都赋为250 for(int i = 0;i &lt; 5;i++){ printf(&quot;%d\\n&quot;,arr[i]); }} 输出结果为：250250250250250 sort() 它能够根据不同情况使用不同的排序方法效率较高，sort(首元素地址，尾元素地址的下一个地址，comp比较函数 (非必填) ),没有比较函数，那么sort函数默认是从小到大排序的 123456789101112#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int main(){ int arr[5] = {24,11,67,43,5}; sort(arr,arr + 5); for(int i = 0;i &lt; 5;i++) cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;; return 0;} 输出结果为：5 11 24 43 67 sort函数中的参数对double，(字典序排列)char类型的变量都同样适用，下面是compare比较函数的代码样例 12345678910111213141516#include &lt;iostream&gt;#include &lt;cstdbool&gt;#include &lt;algorithm&gt;using namespace std;bool compare(int a,int b){ return a &gt; b; //从大到小排序}int main(){ int arr[5] = {24,11,67,43,5}; sort(arr,arr + 5,compare); for(int i = 0;i &lt; 5;i++) cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;; return 0;} 输出结果为：67 43 24 11 5 lower_bound(frist,last,val) 用来寻找在数组或容器[frist,last)范围内第一个值大于等于 val 的元素的位置 12345678910#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int main(){ int arr[5] = {1,2,2,3,4}; int search = 2; cout &lt;&lt; lower_bound(arr,arr + 5,search) - arr; //函数返回找到的元素地址，减去arr就是数组下标 return 0; //没找到的话会返回所要找元素如果存在应该在的位置处的指针} 输出结果为：2 upper_bound(frist,last,val) 用来寻找在数组或容器[frist,last)范围内第一个值大于 val 的元素的位置 12345678910#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int main(){ int arr[5] = {1,2,2,3,4}; int search = 2; cout &lt;&lt; upper_bound(arr,arr + 5,search) - arr; //函数返回找到的元素地址，减去arr就是数组下标 return 0; //没找到的话会返回所要找元素如果存在应该在的位置处的指针} 输出结果为：3","link":"/2022/08/11/Algorithm/"},{"title":"Set","text":"Set的常见用法 set 是一个内部自动有序且不含重复元素的容器，如果需要使用 set需要加入头文件 #include &lt;*set*&gt;,还要再头文件下加上一段 using namespace std； 1.Set的定义 单独定义一个 set； set &lt;typename&gt; name; set &lt;typename&gt; name[SIZE]; //name[0],name[1]都是一个set容器 2.set容器内元素的访问 set 只能通过迭代器访问元素 set&lt;typename&gt;::iterator it; // typename 指的是元素的类型例如：int，char 除了vector，string之外的STL容器都不支持 *(it + i) 的访问方式12345678910111213141516#include &lt;cstdio&gt;#include &lt;set&gt;using namespace std;int main(){ int arr[5] = {34,21,25,67,44}; set&lt;int&gt; st; for(int i = 0;i &lt; 5;i++){ st.insert(arr[i]); //将数组arr中的元素都插入了set容器中 } set&lt;int&gt;::iterator it = st.begin(); for(;it != st.end();it++){ printf(&quot;%3d&quot;,*it); //元素都被从小到大排好序了 } return 0;} 输出结果为： 21 25 34 44 67 3.Set常用函数(1) insert() insert(x) 函数可以将 x 插入到 set 容器中并自动排序和去重 ，时间复杂度为 O(logn) ,其中 n 为set中元素个数。 (2) find() find(value) 返回set中对应值为 value 的迭代器，找到对应元素的话返回对应元素的值的地址，找不到返回 st.end() 12345678910111213#include &lt;cstdio&gt;#include &lt;set&gt;using namespace std;int main(){ set&lt;int&gt; st; set&lt;int&gt;::iterator it; for(int i = 1;i &lt;= 5;i++){ st.insert(i); } printf(&quot;%3d&quot;,*(st.find(2))); return 0;} 输出结果为： 2； (3) erase() erase()有两种使用方法：一种是删除 set 中的单个元素，另一种是删除 set 某一个区间内的函数， 它们的参数均为元素的地址； 12345678910111213141516#include &lt;cstdio&gt;#include &lt;set&gt;using namespace std;int main(){ set&lt;int&gt; st; set&lt;int&gt;::iterator it; for(int i = 1;i &lt;= 5;i++){ st.insert(i); } st.erase(2); //将容器中的元素 2 删除了 for(it = st.begin();it != st.end();it++){ printf(&quot;%3d&quot;,*it); } return 0;} 输出结果为： 1 3 4 5； 12345678910111213141516#include &lt;cstdio&gt;#include &lt;set&gt;using namespace std;int main(){ set&lt;int&gt; st; set&lt;int&gt;::iterator it; for(int i = 1;i &lt;= 5;i++){ st.insert(i); } st.erase(st.find(3),st.end()); //将容器中 3 - 5 的元素都删除了 for(it = st.begin();it != st.end();it++){ printf(&quot;%3d&quot;,*it); } return 0;} (4) size() size()函数用来获得元素内的个数，时间复杂度为 O(l)； 12345678910111213#include &lt;cstdio&gt;#include &lt;set&gt;using namespace std;int main(){ set&lt;int&gt; st; set&lt;int&gt;::iterator it; for(int i = 1;i &lt;= 5;i++){ st.insert(i); } printf(&quot;%d&quot;,st.size()); //size 获取 st 容量的元素个数 return 0;} (5) clear() 用来清空 set 中所有的元素 1234567891011121314#include &lt;cstdio&gt;#include &lt;set&gt;using namespace std;int main(){ set&lt;int&gt; st; set&lt;int&gt;::iterator it; for(int i = 1;i &lt;= 5;i++){ st.insert(i); } st.clear(); //清空元素 printf(&quot;%d&quot;,st.size()); return 0;} 输出元素为：0；","link":"/2022/08/11/Set/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/08/11/hello-world/"},{"title":"newpage","text":"firstsecondthird some context","link":"/2022/08/11/newpage/"},{"title":"vector","text":"Vector的一些常见的用法 要想使用vector，则需要加入头文件 #include &lt;vector&gt;并且要在头文件的下面加上 using namespace std; ,这样就可以在代码中使用vector了 1.vector的定义 vector&lt;typename&gt; name; vector&lt;int&gt; name; vector&lt;char&gt; name; vector&lt;double&gt; name; 上面的定义相当于是一个数组name[SIZE],其长度可以根据需要来变化 定义一个二维数组 vector &lt; vector&lt;typenamne&gt; &gt; name vector&lt;typename&gt; name[SIZE]; 如果 typename 也是STL容器的话，定义的时候要记得在 &gt;&gt; 之间加上空格 2.容器内元素的访问1.通过下标访问 和访问普通的数组一样，vector&lt;typename&gt; vt，vt[0],vt[1] …. 2.通过迭代器访问 创建一个类似于指针的迭代器vector&lt;typename&gt;:: it; 123456789101112131415#include &lt;cstdio&gt;#include &lt;vector&gt;using namespace std;int main(){ vector&lt;int&gt; vt; vector&lt;int&gt;::iterator it; //创建迭代器 for(int i = 1;i &lt;= 5;i++){ vt.push_back(i); //在 vt 的末尾添加元素 } for(it = vt.begin();it != vt.end();it++){ printf(&quot;%3d&quot;,*it); }// begin 的作用是取 vt 的首地址，end是取末尾元素后一位的地址 return 0;} 输出结果为： 1 2 3 4 5; vector的迭代器不支持 it &lt; vt.end() 这种写法，只能用 it != vt.end()。 另外vector的迭代器还支持 it++和++it 的写法 最后需要指出，在常用的STL库中，只有在 vector 和 string 中才能使用 vt.begin() + 3 这种迭代器加上整数的操作。 vector 常用函数实例解析(1)push_back() push_back就是在vector后面添加一个元素 x，时间复杂度为 **O(l)**。 1234567891011121314#include &lt;cstdio&gt;#include &lt;vector&gt;using namespace std;int main(){ vector&lt;int&gt; vt; for(int i = 1;i &lt;= 5;i++){ vt.push_back(i); //将元素1，2，3依次插入vt的末尾 } for(int i = 0;i &lt; vt.size();i++){ //size会得到 vt 容量的大小 printf(&quot;%3d&quot;,vt[i]); } return 0;} 输出结果： 1 2 3 4 5; (2)pop_back() 用来删除vector尾部的元素，时间复杂度为 O(l)。 12345678910111213141516171819#include &lt;cstdio&gt;#include &lt;vector&gt;using namespace std;int main(){ vector&lt;int&gt; vt; for(int i = 1;i &lt;= 5;i++){ vt.push_back(i); //将元素1，2，3依次插入vt的末尾 } for(int i = 0;i &lt; vt.size();i++){ //size会得到 vt 容量的大小 printf(&quot;%3d&quot;,vt[i]); } printf(&quot;\\n&quot;); vt.pop_back(); //将vt末尾的元素删除了 for(int i = 0;i &lt; vt.size();i++){ printf(&quot;%3d&quot;,vt[i]); } return 0;} 输出结果为：1 2 3 4 51 2 3 4 (3) size() 用来获取vector中元素的个数,返回的是 unsigned类型的数据，时间复杂度为 O(l); 123456789101112#include &lt;cstdio&gt;#include &lt;vector&gt;using namespace std;int main(){ vector&lt;int&gt; vt; for(int i = 1;i &lt;= 5;i++){ vt.push_back(i); } printf(&quot;%d&quot;,vt.size()); //返回vt元素个数 return 0;} 输出结果为：5 (4) clear() 清空vector中所有的元素，时间复杂度为 O(n),其中 n为vector中元素的个数 12345678910111213#include &lt;cstdio&gt;#include &lt;vector&gt;using namespace std;int main(){ vector&lt;int&gt; vt; for(int i = 1;i &lt;= 5;i++){ vt.push_back(i); } vt.clear(); //清空了vt中的元素 printf(&quot;%d&quot;,vt.size()); return 0;} (5) insert() **insert(it,i)**用来向任意迭代器中插入元素 i，时间复杂度为 O(n); 12345678910111213141516#include &lt;cstdio&gt;#include &lt;vector&gt;using namespace std;int main(){ vector&lt;int&gt; vt; for(int i = 1;i &lt;= 5;i++){ vt.push_back(i); } vt.insert(vt.begin() + 2, -1); //在第二位和第三位之间插入元素-1 for(int i = 0;i &lt; vt.size();i++){ printf(&quot;%3d&quot;,vt[i]); } return 0;}} 输出结果为： 1 2 -1 3 4 5 (6) erase() erase()用法有两种，一种是删除单个元素，另一种是删除一个区间内的所有元素 erase(it) 意为删除迭代器 it 处的一个元素 1234567891011121314151617#include &lt;cstdio&gt;#include &lt;vector&gt;using namespace std;int main(){ vector&lt;int&gt; vt; for(int i = 1;i &lt;= 5;i++){ vt.push_back(i); } vector&lt;int&gt;::iterator it; it = vt.begin() + 2; //it 指向了vector中的第三个元素 3 vt.erase(it); //将 3 删除了 for(int i = 0;i &lt; vt.size();i++){ printf(&quot;%3d&quot;,vt[i]); } return 0;} 输出结果为： 1 2 4 5； erase(frist,last) 意为删除 [frist,last] 这个区间内的的所有元素 123456789101112131415#include &lt;cstdio&gt;#include &lt;vector&gt;using namespace std;int main(){ vector&lt;int&gt; vt; for(int i = 1;i &lt;= 5;i++){ vt.push_back(i); } vt.erase(vt.begin(),vt.begin() + 3); //将 1,2,3 删除了 for(int i = 0;i &lt; vt.size();i++){ printf(&quot;%3d&quot;,vt[i]); } return 0;} 输出结果为： 4 5；","link":"/2022/08/11/vector/"}],"tags":[{"name":"CSS","slug":"CSS","link":"/tags/CSS/"},{"name":"C++_STL","slug":"C-STL","link":"/tags/C-STL/"},{"name":"test","slug":"test","link":"/tags/test/"}],"categories":[],"pages":[]}