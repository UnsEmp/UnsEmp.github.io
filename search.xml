<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Bootstrap响应式布局</title>
      <link href="/2022/09/02/Bootstrap%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/"/>
      <url>/2022/09/02/Bootstrap%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Bootstrap响应式布局"><a href="#Bootstrap响应式布局" class="headerlink" title="Bootstrap响应式布局"></a>Bootstrap响应式布局</h2><p>布局方式大致分为三种</p><ul><li>固定宽度布局</li><li>流式布局</li><li>栅格式布局</li><li>响应式布局</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--移动端的适配 输入meta:vp --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 让当前viewport的宽度等于设备的宽度，同时不允许用户手动缩放。也许允不允许用户缩放不同的网站有不同的要求，但让viewport的宽度等于设备的宽度，这个应该是大家都想要的效果，如果你不这样的设定的话，那就会使用那个比屏幕宽的默认viewport，也就是说会出现横向滚动条。 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>)&#123; <span class="comment">/*大于等于768*/</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">992px</span>)&#123; <span class="comment">/*大于等于992*/</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1200px</span>)&#123; <span class="comment">/*大于等于1200*/</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tecnology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html5新特性</title>
      <link href="/2022/08/31/html5%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2022/08/31/html5%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="HTML5中vedio标签"><a href="#HTML5中vedio标签" class="headerlink" title="HTML5中vedio标签"></a>HTML5中vedio标签</h3><p>vedio介绍</p><blockquote><p><code>&lt;video&gt;</code> 元素提供了播放、暂停和音量控件来控制视频。<br>同时 <code>&lt;video&gt;</code> 元素也提供了 <code>width</code> 和 <code>height</code> 属性控制视频的尺寸.如果设置的高度和宽度，所需的视频空间会在页面加载时保留。。如果没有设置这些属性，浏览器不知道大小的视频，浏览器就不能再加载时保留特定的空间，页面就会根据原始视频的大小而改变。<br><code>&lt;video&gt;</code> 与 <code>&lt;/video&gt;</code> 标签之间插入的内容是提供给不支持 <code>video</code> 元素的浏览器显示的。<br><code>&lt;video&gt;</code> 元素支持多个 <code>&lt;video&gt;</code>  元素. 元素可以链接不同的视频文件。浏览器将使用第一个可识别的格式：</p></blockquote><p>当前，<code>&lt;video&gt;</code> 元素支持三种视频格式： <strong>MP4</strong>, <strong>WebM</strong>, 和 <strong>Ogg</strong></p><h4 id="使用-DOM-进行控制-vedio"><a href="#使用-DOM-进行控制-vedio" class="headerlink" title="使用 DOM 进行控制 vedio"></a>使用 DOM 进行控制 vedio</h4><blockquote><p>HTML5 <code>&lt;video&gt;</code> 和 <code>&lt;audio&gt;</code> 元素同样拥有方法、属性和事件。<br><code>&lt;video&gt;</code> 和 <code>&lt;audio&gt;</code> 元素的方法、属性和事件可以使用JavaScript进行控制.<br>其中的方法有用于播放、暂停以及加载等。其中的属性（比如时长、音量等）可以被读取或设置。其中的 DOM 事件能够通知您，比方说，<code>&lt;video&gt;</code> 元素开始播放、已暂停，已停止，等等。·</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 检测用户是否点击按钮来执行javascripy函数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;playPause()&quot;</span>&gt;</span>播放/暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- width 设置 视频界面大小 source: 设置视频文件路径， type: 设置文件类型 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;myVideo&quot;</span> <span class="attr">width</span>=<span class="string">&quot;420&quot;</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;../bili.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">            浏览器不支持HTML5:video</span><br><span class="line">        <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> v = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myVideo&quot;</span>); <span class="comment">//访问vedio 对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">playPause</span>(<span class="params"></span>) &#123; </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(v.<span class="property">paused</span>) &#123; <span class="comment">// 通过判断 vedio 属性来判断视频播放还是暂停</span></span></span><br><span class="line"><span class="language-javascript">                v.<span class="title function_">play</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                v.<span class="title function_">pause</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML-DOM-Video-对象"><a href="#HTML-DOM-Video-对象" class="headerlink" title="HTML DOM Video 对象"></a>HTML DOM Video 对象</h3><h4 id="访问-Video-对象"><a href="#访问-Video-对象" class="headerlink" title="访问 Video 对象"></a>访问 Video 对象</h4><p>您可以通过使用 getElementById() 来访问 <video> 元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var x = document.getElementById(&quot;myVideo&quot;);</span><br></pre></td></tr></table></figure><h4 id="创建-Video-对象"><a href="#创建-Video-对象" class="headerlink" title="创建 Video 对象"></a>创建 Video 对象</h4><p>您可以通过使用 document.createElement() 方法来创建 <video> 元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var x = document.createElement(&quot;VIDEO&quot;);</span><br></pre></td></tr></table></figure><h4 id="Video-对象属性"><a href="#Video-对象属性" class="headerlink" title="Video 对象属性"></a>Video 对象属性</h4><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>audioTracks</td><td>返回表示可用音频轨道的 AudioTrackList 对象。</td></tr><tr><td>autoplay</td><td>设置或返回是否在就绪（加载完成）后随即播放视频。</td></tr><tr><td>buffered</td><td>返回表示视频已缓冲部分的 TimeRanges 对象。</td></tr><tr><td>controller</td><td>返回表示视频当前媒体控制器的</td></tr><tr><td>controls</td><td>设置或返回视频是否应该显示控件（比如播放&#x2F;暂停等）。</td></tr><tr><td>crossOrigin</td><td>设置或返回视频的 CORS 设置。</td></tr><tr><td>currentSrc</td><td>返回当前视频的 URL。</td></tr><tr><td>currentTime</td><td>设置或返回视频中的当前播放位置（以秒计）。</td></tr><tr><td>defaultMuted</td><td>设置或返回视频默认是否静音。</td></tr><tr><td>defaultPlaybackRate</td><td>设置或返回视频的默认播放速度。</td></tr><tr><td>duration</td><td>返回视频的长度（以秒计）。</td></tr><tr><td>ended</td><td>返回视频的播放是否已结束。</td></tr><tr><td>error</td><td>返回表示视频错误状态的 MediaError 对象。</td></tr><tr><td>height</td><td>设置或返回视频的 height 属性的值。</td></tr><tr><td>loop</td><td>设置或返回视频是否应在结束时再次播放。</td></tr><tr><td>mediaGroup</td><td>设置或返回视频所属媒介组合的名称。</td></tr><tr><td>muted</td><td>设置或返回是否关闭声音。</td></tr><tr><td>networkState</td><td>返回视频的当前网络状态。</td></tr><tr><td>paused</td><td>设置或返回视频是否暂停。</td></tr><tr><td>playbackRate</td><td>设置或返回视频播放的速度。</td></tr><tr><td>played</td><td>返回表示视频已播放部分的 TimeRanges 对象。</td></tr><tr><td>poster</td><td>设置或返回视频的 poster 属性的值。</td></tr><tr><td>preload</td><td>设置或返回视频的 preload 属性的值。</td></tr><tr><td>readyState</td><td>返回视频当前的就绪状态。</td></tr><tr><td>seekable</td><td>返回表示视频可寻址部分的 TimeRanges 对象。</td></tr><tr><td>seeking</td><td>返回用户当前是否正在视频中进行查找。</td></tr><tr><td>src</td><td>设置或返回视频的 src 属性的值。</td></tr><tr><td>startDate</td><td>返回表示当前时间偏移的 Date 对象。</td></tr><tr><td>textTracks</td><td>返回表示可用文本轨道的 TextTrackList 对象。</td></tr><tr><td>videoTracks</td><td>返回表示可用视频轨道的 VideoTrackList 对象。</td></tr><tr><td>volume</td><td>设置或返回视频的音量。</td></tr><tr><td>width</td><td>设置或返回视频的 width 属性的值。</td></tr></tbody></table><h4 id="Video-对象方法"><a href="#Video-对象方法" class="headerlink" title="Video 对象方法"></a>Video 对象方法</h4><table><thead><tr><th>Method</th><th>描述</th></tr></thead><tbody><tr><td>addTextTrack()</td><td>向视频添加新的文本轨道。</td></tr><tr><td>canPlayType()</td><td>检查浏览器是否能够播放指定的视频类型。</td></tr><tr><td>load()</td><td>重新加载视频元素。</td></tr><tr><td>play()</td><td>开始播放视频。</td></tr><tr><td>pause()</td><td>暂停当前播放的视频。</td></tr></tbody></table><p>参考文献如下:<br><a href="https://www.w3cschool.cn/html5/html5-video.html">https://www.w3cschool.cn/html5/html5-video.html</a><br><a href="https://www.w3cschool.cn/jsref/dom-obj-video.html">https://www.w3cschool.cn/jsref/dom-obj-video.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DatabaseOverview</title>
      <link href="/2022/08/30/DatabaseOverview/"/>
      <url>/2022/08/30/DatabaseOverview/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-数据库概述"><a href="#第一章-数据库概述" class="headerlink" title="第一章 数据库概述"></a>第一章 数据库概述</h2><h3 id="1-1-数据"><a href="#1-1-数据" class="headerlink" title="1.1.数据"></a>1.1.数据</h3><ul><li>数据的定义:数据是数据库中存储的基本对象， <mark>描述数据的符号定义称为 </mark> 数据<blockquote><p>描述事物的符号可以是数据，例如 图片， 视频， 音频等</p></blockquote></li></ul><h3 id="1-2-数据库"><a href="#1-2-数据库" class="headerlink" title="1.2. 数据库"></a>1.2. 数据库</h3><ul><li><p>数据库定义: <mark>数据库是长期存储在计算机内，有组织的可共享的大量数据的集合，数据库中的数据按照一定的数据模型，组织，描述和存储，具有较小的数据冗余度，较高的数据独立性和易扩展性，并可以为各种用户共享 </mark></p></li><li><p>数据库数据特点: <mark>永久存储</mark>，<mark>有组织</mark>，<mark>可扩展</mark></p></li></ul><h3 id="1-3-数据库管理系统"><a href="#1-3-数据库管理系统" class="headerlink" title="1.3. 数据库管理系统"></a>1.3. 数据库管理系统</h3><blockquote><p>数据库系统和操作系统一样是计算机基础软件</p></blockquote><p>数据库系统功能</p><ul><li>(1). 数据定义功能</li><li>(2). 数据组织存储功能</li><li>(3). 数据操纵功能</li><li>(4). 数据库的事务管理和运行</li><li>(5). 数据的建立和维护</li></ul><h3 id="1-4-数据库系统"><a href="#1-4-数据库系统" class="headerlink" title="1.4. 数据库系统"></a>1.4. 数据库系统</h3><p>数据库系统是由数据库，数据库管理系统（及其应用开发工具），应用程序和数据库管理员组成的存储，管理，处理和维护数据的系统</p><p>数据库系统的特点</p><ul><li><ol><li><strong>数据结构化</strong></li></ol></li><li><ul><li>数据库实现整体的结构化，是数据库系统和文件系统的主要区别</li></ul></li><li><ol start="2"><li><strong>数据的共享度高冗余度低并且容易扩展</strong></li></ol></li><li><ul><li>数据共享能大大减少数据冗余，节省存储空间</li></ul></li><li><ol start="3"><li>数据独立性高</li></ol></li><li><ul><li>数据独立性又分为 物理独立性和逻辑独立性</li></ul></li><li><ol start="4"><li>数据由数据库管理系统统一管理和控制</li></ol></li></ul><h3 id="2-1-数据模型结构"><a href="#2-1-数据模型结构" class="headerlink" title="2.1 数据模型结构"></a>2.1 数据模型结构</h3><p>数据模型通常由 数据结构， 数据操作和数据的完整性约束条件 三部分组成</p><ul><li><ol><li><mark>数据结构</mark></li></ol></li><li><ul><li>数据结构描述数据之间的组成对象，以及对象之间的联系</li></ul></li><li><ol start="2"><li><mark>数据操作</mark></li></ol></li><li><ul><li>指对于数据库中各种对象的实例允许执行的操作集合</li></ul></li><li><ul><li><ol start="3"><li><mark>数据的完整性约束条件</mark></li></ol></li></ul></li><li><ul><li>是一组完整性规则</li></ul></li></ul><p>数据模型分为 <strong>层次模型</strong>， <strong>网状模型</strong>， <strong>关系模型</strong>，<strong>面向对象模型</strong></p><table><thead><tr><th>模型名称</th><th>特点</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>层次模型</td><td>(1). 有且只有一个节点没有双亲节点,且该节点为根节点<br> (2). 根以外的其他节点都有且仅有一个双亲节点</td><td>(1).层次模型的数据结构清晰<br> (2).层次数据模型查询效率高 <br>(3).层次数据模型提供了良好的完整性支持</td><td>(1).现实中很多联系是非层次性的 <br> (2). 节点具有多个双亲节点，用层次模型表示会显得比较笨拙 <br> (3).查询子女必须通过双亲 <br>(4).结构严密，层次命令趋于程序化</td></tr><tr><td>网状模型</td><td>(1). 允许一个以上节点无双亲 <br> (2). 一个节点可以有多于一个的双亲</td><td>(1). 能直接描述现实世界 <br> (2). 具有良好的性能，存储效率高</td><td>(1). 结构较复杂 (2). DDL， DML复杂，用户不容易掌握 (3). 编写应用程序负担较重</td></tr><tr><td>关系模型</td><td>(1). 建立在数学概念的基础之上</td><td>(1). 建立在严格的数学概念基础上 (2). 数据结构简单，清晰，易懂 (3).关系模型存储路径透明，具有更高的数据独立性</td><td>(1). 查询效率不高</td></tr></tbody></table><h3 id="3-1-数据库系统的三级模式结构"><a href="#3-1-数据库系统的三级模式结构" class="headerlink" title="3.1 数据库系统的三级模式结构"></a>3.1 数据库系统的三级模式结构</h3><p><img src="/../images/DatabaseThreeGrade.jpg"></p><ol><li><strong>模式</strong></li></ol><p>是数据库中所有数据的逻辑结构和特征的描述</p><ol start="2"><li><strong>外模式</strong></li></ol><p>数据库用户能够看到和使用的局部数据的逻辑结构和特征的描述，是数据库用户的视图</p><ol start="3"><li><strong>内模式</strong></li></ol><p>一个数据库只有一个内模式，是数据物理结构和存储方式的描述</p>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>function</title>
      <link href="/2022/08/27/function/"/>
      <url>/2022/08/27/function/</url>
      
        <content type="html"><![CDATA[<h4 id="c-11-function-用法"><a href="#c-11-function-用法" class="headerlink" title="c++11 function 用法"></a>c++11 function 用法</h4><p><code>function</code>是一个<code>template</code>，定义于头文件<code>functional</code>中。通过<code>function&lt;int(int, int)&gt;</code> 声明一个<code>function</code>类型，它是“接受两个int参数、返回一个int类型”的可调用对象，这里可调用对象可以理解为函数指针（指针指向一个函数，该函数有两个int类型参数，返回int类型，即：<code>int (*p)(int, int)</code>  ）。</p><p>可调用对象：对于一个对象或表达式，如果可以对其使用调用运算符，则称该对象或表达式为可调用对象。</p><p>C++语言中有几种可调用对象：函数、函数指针、lambda表达式、bind创建的对象以及重载了函数调用运算符的类。</p><p>和其他对象一样，可调用对象也有类型。例如，每个lambda有它自己唯一的（未命名）类类型；函数及函数指针的类型则由其返回值类型和实参类型决定。</p><ul><li><ol><li>保存普通函数</li></ol></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printA</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     cout &lt;&lt; a &lt;&lt; endl;          </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::function&lt;<span class="type">void</span>(<span class="type">int</span> a)&gt; func;</span><br><span class="line">func = printA;</span><br><span class="line"><span class="built_in">func</span>(<span class="number">2</span>);   <span class="comment">//2</span></span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>保存 lambda 函数</li></ol></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::function&lt;<span class="type">void</span>()&gt; func_1 = []()&#123;cout &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; endl;&#125;;    </span><br><span class="line"><span class="built_in">func_1</span>();  <span class="comment">//hello world</span></span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>保存成员函数</li></ol></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>&#123;</span><br><span class="line">    <span class="built_in">Foo</span>(<span class="type">int</span> num) : <span class="built_in">num_</span>(num)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print_add</span><span class="params">(<span class="type">int</span> i)</span> <span class="type">const</span> </span>&#123;cout &lt;&lt; num_ + i &lt;&lt; endl;&#125;</span><br><span class="line">    <span class="type">int</span> num_;  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存成员函数</span></span><br><span class="line">std::function&lt;<span class="type">void</span>(<span class="type">const</span> Foo&amp;,<span class="type">int</span>)&gt; f_add_display = &amp;Foo::print_add;</span><br><span class="line"><span class="function">Foo <span class="title">foo</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="built_in">f_add_display</span>(foo,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery</title>
      <link href="/2022/08/19/JQuery/"/>
      <url>/2022/08/19/JQuery/</url>
      
        <content type="html"><![CDATA[<h2 id="1-JQuery-概述"><a href="#1-JQuery-概述" class="headerlink" title="1. JQuery 概述"></a>1. JQuery 概述</h2><ul><li>什么是 JQuery ?</li></ul><p>快捷，简便的第三方 <mark>js库</mark>, 能够简化 dom 操<br>作, 并且能屏蔽浏览器之间的兼容性问题。</p><ul><li>工厂函数 <code>$()</code></li></ul><p>在 <code>JQuery</code> 中无论使用哪一种类型的选择符，都要从一个美元符号和圆括号开始，所有能在样式中使用的选择符，都能放到这个圆括号中的引号内</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Dom 查找 id 属性名为 myList 的标签</span><br><span class="line">document<span class="selector-class">.getElementByld</span>(&#x27;myList&#x27;);</span><br><span class="line"></span><br><span class="line"># JQuery</span><br><span class="line">$(&quot;<span class="selector-id">#myList</span>&quot;);</span><br></pre></td></tr></table></figure><h2 id="2-JQuery的增删改查"><a href="#2-JQuery的增删改查" class="headerlink" title="2. JQuery的增删改查"></a>2. JQuery的增删改查</h2><ul><li>访问元素属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取北京节点的name值</span></span><br><span class="line">$bj.<span class="title function_">attr</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置北京节点的name值</span></span><br><span class="line">$bj.<span class="title function_">attr</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;beijing&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>html操作，读取或者修改HTML内容</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 p 标签的 html 内容</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">html</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 p 标签的内容</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;&lt;strong&gt;你最喜欢的水果是？&lt;/strong&gt;&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>修改节点内容</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 p 标签文本</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">text</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 p 标签内容</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;&lt;strong&gt;你最喜欢的水果是？&lt;/strong&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>值操作</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 p 标签的 value 值</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改 p 标签的 value 值</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;我被点击了&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>将新元素添加到 DOM 树中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $new = $(<span class="string">&quot;html&quot;</span>);</span><br><span class="line">$(parent).<span class="title function_">append</span>($new);</span><br></pre></td></tr></table></figure><ul><li>删除操作</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(...).<span class="title function_">remove</span>(...);</span><br><span class="line"><span class="comment">// 获取第二个 li 元素节点，将它从网页中删除</span></span><br><span class="line">$(<span class="string">&quot;ul li:eq(1)&quot;</span>).<span class="title function_">remove</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把 &lt;li&gt; 元素中属性 title 不等于 菠萝 的 li 标签全部删除</span></span><br><span class="line">$(<span class="string">&quot;ul li&quot;</span>).<span class="title function_">remove</span>(<span class="string">&quot;li[title != 菠萝]&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css圆角边框与阴影</title>
      <link href="/2022/08/19/css%E5%9C%86%E8%A7%92%E8%BE%B9%E6%A1%86%E4%B8%8E%E9%98%B4%E5%BD%B1/"/>
      <url>/2022/08/19/css%E5%9C%86%E8%A7%92%E8%BE%B9%E6%A1%86%E4%B8%8E%E9%98%B4%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<ul><li>圆角边框 <code>border-radius</code></li><li><ul><li><code>border-top-left-radius</code> 左上角的形状</li></ul></li><li><ul><li><code>border-top-right-radius</code> 右上角的形状</li></ul></li><li><ul><li><code>border-bottom-left-radius</code> 左下角的形状</li></ul></li><li><ul><li><code>border-bottom-right-radius</code> 右下角的形状</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">    <span class="attribute">border-top-left-radius</span>: <span class="number">40px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-bottom-right-radius</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/border_Radius.png"></p><ul><li>阴影(<code>box-shadow</code>)</li></ul>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cssGridLayout</title>
      <link href="/2022/08/18/cssGridLayout/"/>
      <url>/2022/08/18/cssGridLayout/</url>
      
        <content type="html"><![CDATA[<p><strong>网格布局</strong></p><p>CSS 网格布局模块（CSS Grid Layout Module）提供了带有行和列的基于网格的布局系统，它使网页设计变得更加容易，而无需使用浮动和定位。</p><ul><li>Display 属性</li></ul><p>当 HTML 元素的 <code>display</code> 属性设置为 <code>grid</code> 或 <code>inline-grid</code> 时，它就会成为网格容器。</p><ul><li>网格列（Grid Columns）</li><li><ul><li>网格项的垂直线被称为列。<!-- <img src="/images/gird_row.png"> --><img src="/../images/gird_row.png"></li></ul></li><li>网隔行（Grid Rows）</li><li><ul><li>网格项的水平线被称为行。<!-- <img src=""> --><img src="/../images/gird_Col.png"></li></ul></li><li>网格间隙（Grid Gaps）</li><li>每列&#x2F;行之间的间隔称为间隙。</li></ul><!-- <img src="./../images/gird_Gap.png"/> --><!-- ![](/public/images/gird_Gap.png) --><p><img src="/../images/gird_Gap.png"></p><p>您可以通过使用以下属性之一来调整间隙大小：</p><ul><li>grid-column-gap</li><li>grid-row-gap</li><li>grid-gap</li></ul><p>参考自: <a href="https://www.w3school.com.cn/css/css_grid.asp">https://www.w3school.com.cn/css/css_grid.asp</a></p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css弹性盒子</title>
      <link href="/2022/08/16/css%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90/"/>
      <url>/2022/08/16/css%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h2 id="css弹性盒子"><a href="#css弹性盒子" class="headerlink" title="css弹性盒子"></a>css弹性盒子</h2><ul><li><mark> 弹性盒子可以解决那些问题？</mark></li></ul><ol><li>使盒子中的元素水平垂直居中对齐</li><li>使盒子中元素之间的空隙平均分配</li><li>使元素自动占据盒子剩余空间</li></ol><ul><li><mark> 定义弹性盒子 </mark></li></ul><table><thead><tr><th>属性</th><th>描述</th><th>设置参数</th></tr></thead><tbody><tr><td><code>display</code></td><td>将普通盒子转化为弹性盒子</td><td><code>flex</code></td></tr><tr><td><code>flex-direction</code></td><td>设置行布局, 列布局</td><td><code>row</code>, <code>row-reverse</code>，<code>column</code>, <code>column-reverse</code></td></tr><tr><td><code>flex-wrap</code></td><td>设置弹性元素是否折叠</td><td><code>nowrap</code>, <code>wrap</code>, <code>wrap-reverse</code></td></tr><tr><td><code>flex-flow</code></td><td>同时设置<code>flex-direction</code>, <code>flex-wrap</code>两个属性的值</td><td>eg: <code>row</code> <code>wrap</code></td></tr><tr><td><code>justify-content</code></td><td>元素在主轴的对齐方式</td><td><code>flex-start</code>(主轴左边), <code>center</code>(中心位置), <code>flex-end</code>(主轴右边), <code>space-between</code>, <code>space-around</code></td></tr><tr><td><code>align-items</code></td><td>元素在辐轴上的对齐方式</td><td><code>flex-start</code>, <code>center</code>, <code>flex-end</code>, <code>stretch</code>(不需要设置元素高度，会自动铺满容器的那一列)</td></tr><tr><td><code>align-content</code></td><td>设置多行元素在容器中的整齐对齐方式</td><td><code>flex-start</code>, <code>center</code>, <code>flex-end</code>, <code>stretch</code>, <code>space-between</code>, <code>space-around</code></td></tr></tbody></table><!-- <img src="./../images/7.png"/> --><!-- <a href="https://www.baidu.com">lalala</a> --><ul><li><code>flex-direction</code> 属性布局</li></ul><p><img src="/../images/flex-direction_rowLayout.png"><br><img src="/../images/flex-direction_colLayout.png"></p><ul><li><code>align-items</code> 属性布局</li></ul><!-- <img src="./../images/align-itmes.png"> --><p><img src="/../images/align-itmes.png"></p><h2 id="弹性元素"><a href="#弹性元素" class="headerlink" title="弹性元素"></a>弹性元素</h2><ol><li><code>flex-grow</code> 属性</li></ol><ul><li>元素被拉大的比例，按比例分配容器剩余空间</li><li><ul><li>默认值为零元素不占用空间</li></ul></li><li><ul><li>默认值为 n 占用空间中 n 份空间</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">    <span class="attribute">align-items</span>: stretch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-items</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下图是上面css代码中三个元素的容器空间占比</p><!-- <img src="../images/flex_items_grow.png"/> --><p><img src="/../images/flex_items_grow.png"></p><ol start="2"><li><code>flex-shrink</code></li></ol><ul><li>元素被压缩的比例</li><li><ul><li>默认为 1 等比压缩</li></ul></li><li><ul><li>设置为 0 表示不压缩</li></ul></li></ul><ol start="3"><li><code>flex-basis</code></li></ol><ul><li>元素在主轴上的默认尺寸，其优先级高于 <code>width</code> 属性</li></ul><ol start="4"><li><code>flex</code></li></ol><ul><li><code>flex: flex-grow flex-shrink flex-basis</code></li></ul><ol start="5"><li><code>order</code></li></ol><ul><li>子元素在容器中的排列顺序，<code>order</code>值越小越靠前。</li></ul><ol start="6"><li><code>align-self</code></li></ol><ul><li>设置单个弹性元素在辅轴上的对齐方式， <code>align-itmes</code> 设置的是全部弹性元素</li></ul>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css布局与定位</title>
      <link href="/2022/08/15/css%E5%B8%83%E5%B1%80%E4%B8%8E%E5%AE%9A%E4%BD%8D/"/>
      <url>/2022/08/15/css%E5%B8%83%E5%B1%80%E4%B8%8E%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<ol><li>盒子模型</li></ol><p>页面中的所有元素都能看成一个盒子，占据着一定的页面空间，每个盒子由 <code>context</code> (内容), <code>border</code> (边框), <code>padding</code> (内边距), <code>margin</code> (外边距, <strong>注意!</strong>: 竖直方向会合并，水平方向不会)。<br>如下图是盒子结构示意图<br><img src="/../images/7.png"></p><ol start="2"><li><code>overflow</code> 属性</li></ol><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>hidden</code></td><td>超出部分不可见</td></tr><tr><td><code>scroll</code></td><td>显示滚动条</td></tr><tr><td><code>auto</code></td><td>如果有超出部分就显示滚动条</td></tr></tbody></table><ol start="3"><li>border 属性</li></ol><p><strong>注意！</strong> 当图片间有间隙的时候设置 <code>font-size: 0</code>， 即可取消图片间的间隙</p><table><thead><tr><th>属性</th><th>描述</th><th>设置方法</th></tr></thead><tbody><tr><td><code>border-width</code></td><td>盒子宽度</td><td><code>px</code>, <code>thin</code>, <code>medium</code>, <code>thick</code></td></tr><tr><td><code>border-style</code></td><td>盒子类型</td><td><code>dashed</code>, <code>dotted</code>, <code>solid</code>, <code>double</code></td></tr><tr><td><code>border-color</code></td><td>颜色</td><td><code>red</code> …</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#newimg</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#newimg</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> dashed <span class="number">#0cf</span>; <span class="comment">/* 像素大小 线条样式 颜色 */</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">div</span> id=&quot;newimg&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">img</span> <span class="attribute">src</span>=&quot;./images/<span class="number">3in</span>dex_r2_c2<span class="selector-class">.png</span>&quot;/&gt;</span><br><span class="line">    &lt;<span class="selector-tag">img</span> <span class="attribute">src</span>=&quot;./images/<span class="number">3in</span>dex_r2_c2<span class="selector-class">.png</span>&quot;/&gt;</span><br><span class="line">    &lt;<span class="selector-tag">img</span> <span class="attribute">src</span>=&quot;./images/<span class="number">3in</span>dex_r2_c2<span class="selector-class">.png</span>&quot;/&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><p>下图是上面html代码的效果图<br><img src="/../images/8.png"></p><ol start="3"><li>css定位的三种方式<blockquote><ul><li><strong>文件流定位</strong>: 默认从上到下， 从左到右的顺序摆放盒子，元素之间可以通过 <code>display</code> 进行修改转化<blockquote><ul><li><code>block</code>: 独占一行，元素 <code>height</code>, <code>width</code>, <code>margin</code>, <code>padding</code>，都<strong>可以</strong>修改</li><li><code>inline</code>: 不单独占用一行，元素 <code>height</code>, <code>width</code>, <code>margin</code>, <code>padding</code>，<strong>不可以</strong>修改</li><li><code>inline-block</code>: 不单独占用一行，元素 <code>height</code>, <code>width</code>, <code>margin</code>, <code>padding</code>，都可以修改。</li></ul></blockquote></li></ul></blockquote></li></ol><blockquote><ul><li><strong>浮动定位</strong>: 可以设置并列一行的两个盒子<blockquote><ul><li><code>float</code>: <code>left</code>, <code>right</code></li><li><code>clear</code>: <code>left</code>, <code>right</code>, <code>both</code></li></ul></blockquote></li></ul></blockquote><blockquote><ul><li><strong>层定位</strong>: 设置覆盖层面的元素图片</li></ul></blockquote><table><thead><tr><th>属性</th><th>特点</th><th>描述</th></tr></thead><tbody><tr><td><code>fixed</code></td><td>无</td><td>相对于浏览器定位</td></tr><tr><td><code>relative</code></td><td>保留原位置</td><td>相对于其直接父元素定位</td></tr><tr><td><code>absolute</code></td><td>不保留原位置</td><td>相对于非<code>static</code>类型父元素(若父元素中都是<code>static</code>类型，则取<code>body</code>)进行定位</td></tr><tr><td><code>left</code>, <code>right</code>, <code>top</code>, <code>bottom</code></td><td>无</td><td>设置相对于参照物的距离</td></tr><tr><td><code>z-index</code></td><td>无</td><td>设置网页层面优先级，优先级低的被覆盖</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css样式</title>
      <link href="/2022/08/15/css%E6%A0%B7%E5%BC%8F/"/>
      <url>/2022/08/15/css%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="css样式"><a href="#css样式" class="headerlink" title="css样式"></a>css样式</h2><ol><li><strong>单位与颜色</strong></li></ol><!-- | - | - | --><table><thead><tr><th>单位</th><th>描述</th></tr></thead><tbody><tr><td>px</td><td>像素</td></tr><tr><td>em</td><td>1em - 表示一个字符 2em - 表示两个字符，可以自动适应用户所使用的字体</td></tr><tr><td>%</td><td>百分比</td></tr></tbody></table><hr><table><thead><tr><th>颜色</th><th>描述</th></tr></thead><tbody><tr><td><code>rgb(x, x, x)</code></td><td>RGB取值，<code>0 - 255</code></td></tr><tr><td><code>rgb(x%, x%, x%)</code></td><td>RGB取值 <code>0% - 255%</code></td></tr><tr><td><code>rgba(x, x, x, x)</code></td><td>多一个参数表示透明度</td></tr><tr><td><code>#rrggbb</code></td><td>十六进制数表示颜色, eg: <code>#ff0000</code></td></tr></tbody></table><hr><ol start="2"><li><strong>文本属性</strong></li></ol><table><thead><tr><th>属性</th><th>描述</th><th>取值</th></tr></thead><tbody><tr><td><code>color</code></td><td>文本颜色</td><td><code>red</code>, <code>#f00</code>, <code>RGB(255, 0, 0)</code></td></tr><tr><td><code>letter-spacing</code></td><td>字符间距</td><td><code>2px</code>, <code>-3px</code></td></tr><tr><td><code>line-height</code></td><td>行高</td><td><code>14px</code>, <code>1.5em</code>, <code>120%</code></td></tr><tr><td><code>text-align</code></td><td>对其方式</td><td><code>center</code>, <code>left</code>, <code>right</code>, <code>justify</code></td></tr><tr><td><code>text-decoration</code></td><td>装饰线</td><td><code>none</code>(去除超链接下划线), <code>overline</code>, <code>underline</code>, <code>line-through</code></td></tr><tr><td><code>text-indent</code></td><td>首行缩进</td><td><code>2em</code></td></tr></tbody></table><blockquote><ul><li>text-decoration<br><img src="/../images/4.png"><br><img src="/../images/5.png"></li></ul></blockquote><hr><ol start="3"><li><strong>文字属性</strong></li></ol><table><thead><tr><th>属性</th><th>描述</th><th>设置方式</th></tr></thead><tbody><tr><td><code>font</code></td><td>在一个声明中设置所有字体属性</td><td>font: bold 18px ‘幼圆’</td></tr><tr><td><code>font</code></td><td>字体系列</td><td><code>font-family</code>: “<code>Hiragino</code>“, “<code>Sans GB</code>“…</td></tr><tr><td><code>font-size</code></td><td>字号</td><td><code>14px</code>, <code>120%</code></td></tr><tr><td><code>font-style</code></td><td>斜体</td><td><code>italic</code></td></tr><tr><td><code>font-weight</code></td><td>粗体</td><td><code>bold</code></td></tr></tbody></table><hr><ol start="4"><li><strong>背景样式</strong></li></ol><table><thead><tr><th>属性</th><th>描述</th><th>设置方式</th></tr></thead><tbody><tr><td><code>background-color</code></td><td>颜色</td><td><code>red</code></td></tr><tr><td><code>background-image</code></td><td>背景图片</td><td><code>url(&quot;logo.jpg&quot;)</code></td></tr><tr><td><code>background-repeat</code></td><td>背景填充格式</td><td><code>repeat</code>(重复填充背景), <code>repeat-x</code>(横向重复填充背景), <code>repeat-y</code>(纵向填充背景), <code>no-repeat</code>(不重复填充背景)</td></tr><tr><td><code>background</code></td><td>背景简写设置顺序</td><td>颜色 图片 repeat</td></tr></tbody></table><hr><ol start="5"><li><strong>超链接样式</strong></li></ol><p>当要设置所用超链接样式的时候直接设置 <code>a</code> 标签的样式就好了</p><p>超链接设置具有一定的顺序， <code>a:hover</code> 需要位于 <code>a:link</code>, <code>a:visited</code> 之后进行设置， <code>a:active</code> 需要位于 <code>a:hover</code> 之后</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>a:link</code></td><td>普通的，未被访问的链接</td></tr><tr><td><code>a:visited</code></td><td>已经被访问了的链接</td></tr><tr><td><code>a:hover</code></td><td>鼠标指针悬停的链接</td></tr><tr><td><code>a:active</code></td><td>被点击时的链接</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#09f</span>; <span class="comment">/* 浅蓝色 */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red; <span class="comment">/* 红色 */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-decoration</span>: underline;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: chartreuse; <span class="comment">/* 绿色 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">120%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: blue; <span class="comment">/* 蓝色 */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>a link ~ ~ ~ !<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>普通链接为浅蓝色， 访问过的链接变成蓝色， 鼠标悬停到的链接呈现绿色，并且字体放大 120%，字体下方有下划线，点击的时候变成蓝色，并跳转到百度页面。</p><hr><ol start="6"><li><strong>列表</strong></li></ol><p>列表分为 <code>ul</code> (无序列表), <code>ol</code> (有序列表)</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>list-style</code></td><td>所有用于列表的属性，设置一个声明</td></tr><tr><td><code>list-style-image</code></td><td>为列表项标志设置图像</td></tr><tr><td><code>list-style-position</code></td><td>标志的位置</td></tr><tr><td><code>list-style-type</code></td><td>标志的类型</td></tr></tbody></table><hr><ol start="7"><li><strong>表格</strong></li></ol><p>表格大小设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line">    bored-collapse: collapse; <span class="comment">/* (可以将表格之间的间隔清除, 如下图) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/6.png" alt="描述collapse用法的图片"></p><p><code>border</code> 设置方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span>, <span class="selector-tag">td</span>, <span class="selector-tag">th</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>css 奇偶选择器见 <a href="https://www.php.cn/css-tutorial-477973.html">https://www.php.cn/css-tutorial-477973.html</a></p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css选择器</title>
      <link href="/2022/08/15/css%E9%80%89%E6%8B%A9%E5%99%A8/"/>
      <url>/2022/08/15/css%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h2><ol><li>标签选择器</li></ol><p>通过设计指定<code>body</code>, <code>p</code> 等标签来指定网页样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>:<span class="number">12px</span>; </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span>&#123;  </span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-family</span>:黑体;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>:<span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;    </span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span>&#123; </span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-family</span>: 黑体;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    hr&#123; </span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>:red; </span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>正文的段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>类别 class 选择器</li></ol><p><code>.</code> 开头进行定义 ，用 <code>class</code> 属性进行引用， <strong>可以多次引用</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"> </span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">p</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.one</span>&#123;<span class="attribute">font-size</span>:<span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.two</span>&#123;<span class="attribute">font-size</span>:<span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span>类别1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span>类别1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span>类别2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span>类别2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>普通段落中的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>id选择器</li></ol><p>符号 <code>#</code> 开头定义，使用 <code>id</code> 属性进行引用，<strong>只能被引用一次</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=gb2312&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"> </span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#one</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>:<span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#two</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>:<span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span>&gt;</span>文字1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span>&gt;</span>文字2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>多个选择器的集体声明</li></ol><p>同时声明多个标签，具有相同值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h1</span>,<span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>选择器的镶嵌声明</li></ol><p><code>p</code>标签和<code>span</code> 标签之间间隔一个空格， 表示只有在<code>p</code>标签内使用<code>span</code>标签表示的内容才会将颜色设置为 <code>red</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span> <span class="selector-tag">span</span>&#123; </span></span><br><span class="line"><span class="language-css"> <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>全局选择器声明</li></ol><p>字符 <code>*</code> 表示将所有标签格式都进行更改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">* &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="7"><li>class 与 id 选择器混合使用</li></ol><p><code>class</code> 属性同时引用多个标签之间用 空格 (<code>space</code>) 隔开。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"> </span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.one</span>&#123;<span class="attribute">font-size</span>:<span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.two</span>&#123;<span class="attribute">font-size</span>:<span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.red</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.yellow</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: yellow;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: right;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#my</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多个class选择器混用，用空格分开 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;one red right&quot;</span>&gt;</span>这里的文字，18px红色，右对齐<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one yellow left&quot;</span>&gt;</span>这里的文字，18px黄色，左对齐<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- id和class混用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;my&quot;</span> <span class="attr">class</span>=<span class="string">&quot;one yellow left&quot;</span> &gt;</span>这里的文字，18px黄色，左对齐，有背景色<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>z-index</title>
      <link href="/2022/08/13/z-index/"/>
      <url>/2022/08/13/z-index/</url>
      
        <content type="html"><![CDATA[<h2 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h2><p>z-index 属性设定了一个定位元素及其后代元素或 flex 项目的 z-order。当元素之间重叠的时候，z-index 较大的元素会覆盖较小的元素在上层进行显示。<br>对于一个已经定位的盒子（即其 position 属性值不是 static，这里要注意的是 CSS 把元素看作盒子），z-index 属性指定：</p><ol><li>盒子在当前堆叠上下文中的堆叠层级。</li><li>盒子是否创建一个本地堆叠上下文。</li></ol><p>语法:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* 字符值 */</span><br><span class="line">z-index: auto;</span><br><span class="line"></span><br><span class="line">/* 整数值 */</span><br><span class="line">z-index: 0;</span><br><span class="line">z-index: 3;</span><br><span class="line">z-index: 289;</span><br><span class="line">z-index: -1;/* 使用负值降低优先级 */</span><br><span class="line"></span><br><span class="line">/* 全局值 */</span><br><span class="line">z-index: inherit;</span><br><span class="line">z-index: initial;</span><br><span class="line">z-index: unset;</span><br></pre></td></tr></table></figure><p>demo:</p><ol><li><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dashed-box&quot;</span>&gt;</span>Dashed box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gold-box&quot;</span>&gt;</span>Gold box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;green-box&quot;</span>&gt;</span>Green box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dashed-box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">border</span>: dashed;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">8em</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.gold-box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">3</span>; <span class="comment">/* put .gold-box above .green-box and .dashed-box */</span></span><br><span class="line">  <span class="attribute">background</span>: gold;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">3em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.green-box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>; <span class="comment">/* put .green-box above .dashed-box */</span></span><br><span class="line">  <span class="attribute">background</span>: lightgreen;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">65%</span>;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">7em</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css简写属性</title>
      <link href="/2022/08/13/css%E7%AE%80%E5%86%99%E5%B1%9E%E6%80%A7/"/>
      <url>/2022/08/13/css%E7%AE%80%E5%86%99%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS-的简写属性"><a href="#CSS-的简写属性" class="headerlink" title="CSS 的简写属性"></a>CSS 的简写属性</h2><ol><li><p>什么是 <strong>简写属性</strong>？<br> <strong>简写属性</strong> 是可以让你同时设置好几个 CSS 属性值的 CSS 属性。使用简写属性，Web 开发人员可以编写更简洁、更具可读性的样式表，节省时间和精力。</p></li><li><p><code>CSS</code> 规范定义简写属性的目的在于将那些关于同一主题的常见属性的定义集中在一起。比如 <code>CSS</code> 的 <code>background</code> 属性就是一个简写属性，它可以定义 <code>background-color</code>、<code>background-image</code>、<code>background-repeat</code> 和 <code>background-position</code> 的值。类似地，最常见的字体相关的属性可以使用 font 的简写，盒子（<code>box</code>）各方向的外边距（<code>margin</code>）可以使用 <code>margin</code> 这个简写。</p></li></ol><h2 id="边界情况"><a href="#边界情况" class="headerlink" title="边界情况"></a>边界情况</h2><ol><li><p>没有指定的值会被设置为它的初始值。这听起来似乎本来就很合理的样子，但这确实意味着，它将会覆盖之前设置的值。因此：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">background-color: red;</span><br><span class="line">background: url(images/bg.gif) no-repeat top right;</span><br></pre></td></tr></table></figure><p>以上样式不会将 <code>background</code> 的 <code>color</code> 值设置为 <code>red</code>，而是 <code>background-color</code> 的默认值 <code>transparent</code>，因为第二条规则优先。</p></li><li><p>关键词 <code>inherit</code> 只可以应用于单独属性（individual properties），如果应用于一个简写属性（shorthand property），则必须整体应用，而能对简写属性值的每一个部分单独应用。由于单独属性的漏掉的值会被它们的初始值（initial value）替代，因此不可能允许单个属性通过省略继承的。这意味着让一个属性的值使用继承值的唯一方法就是使用值是 <code>inherit</code> 的普通属性（longhand property）。</p></li><li><p>简写属性不试图强制它们替代属性的值的特定顺序。这适用于当这些属性使用不同类型的值时，因为这个时候顺序并不重要。但当几个属性可以设置相同值的时候，就没那么简单了，要注意替代属性的特定顺序。</p></li></ol><p>转载自: <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Shorthand_properties">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Shorthand_properties</a></p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css三种添加方法</title>
      <link href="/2022/08/12/css%E4%B8%89%E7%A7%8D%E6%B7%BB%E5%8A%A0%E6%96%B9%E6%B3%95/"/>
      <url>/2022/08/12/css%E4%B8%89%E7%A7%8D%E6%B7%BB%E5%8A%A0%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>css</code>  的添加方式分为三种分别是 <strong>行内添加</strong>， <strong>内嵌样式</strong>，<strong>单独文件</strong></p></blockquote><blockquote><ol><li><strong>行内添加</strong></li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: blue;&quot;</span>&gt;</span>ha ha ha!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/./../images/1.png"></p><blockquote><ol start="2"><li><strong>内嵌样式</strong></li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>ha ha ha!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><strong>单独文件</strong><br><img src="/./../images/3.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vector</title>
      <link href="/2022/08/11/vector/"/>
      <url>/2022/08/11/vector/</url>
      
        <content type="html"><![CDATA[<h1 id="Vector的一些常见的用法"><a href="#Vector的一些常见的用法" class="headerlink" title="Vector的一些常见的用法"></a>Vector的一些常见的用法</h1><blockquote><p>要想使用<strong>vector</strong>，则需要加入头文件 <code>#include &lt;vector&gt;</code><br>并且要在头文件的下面加上 <code>using namespace std; </code>,这样就可以在代码中使用<strong>vector</strong>了    </p></blockquote><h2 id="1-vector的定义"><a href="#1-vector的定义" class="headerlink" title="1.vector的定义"></a>1.vector的定义</h2><blockquote><p><code>vector&lt;typename&gt; name;</code>  </p><ul><li><code>vector&lt;int&gt; name; </code> </li><li><code>vector&lt;char&gt; name;</code>  </li><li><code>vector&lt;double&gt; name;</code></li></ul></blockquote><p>上面的定义相当于是一个数组name[SIZE],其长度可以根据需要来变化 </p><blockquote><p>定义一个二维数组 <code>vector &lt; vector&lt;typenamne&gt; &gt; name  </code><br><code>vector&lt;typename&gt;</code> name[SIZE];</p></blockquote><p>如果 <em>typename</em> 也是STL容器的话，定义的时候要记得在 <strong>&gt;&gt;</strong> 之间加上空格</p><h2 id="2-容器内元素的访问"><a href="#2-容器内元素的访问" class="headerlink" title="2.容器内元素的访问"></a>2.容器内元素的访问</h2><h3 id="1-通过下标访问"><a href="#1-通过下标访问" class="headerlink" title="1.通过下标访问"></a>1.通过下标访问</h3><blockquote><p>和访问普通的数组一样，<code>vector&lt;typename&gt; vt，vt[0],vt[1] </code>….</p></blockquote><h3 id="2-通过迭代器访问"><a href="#2-通过迭代器访问" class="headerlink" title="2.通过迭代器访问"></a>2.通过迭代器访问</h3><blockquote><p>创建一个类似于指针的迭代器<code>vector&lt;typename&gt;:: it;</code></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; vt;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;::iterator it; <span class="comment">//创建迭代器</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">5</span>;i++)&#123;</span><br><span class="line">        vt.push_back(i); <span class="comment">//在 vt 的末尾添加元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(it = vt.begin();it != vt.end();it++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,*it);</span><br><span class="line">    &#125;<span class="comment">// begin 的作用是取 vt 的首地址，end是取末尾元素后一位的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>输出结果为：  1  2  3  4  5;</p></blockquote></blockquote><blockquote><blockquote><ul><li>vector的迭代器不支持 it &lt; vt.end() 这种写法，只能用 it !&#x3D; vt.end()。</li><li>另外vector的迭代器还支持 it++和++it 的写法</li></ul></blockquote></blockquote><blockquote><blockquote><ul><li>最后需要指出，在常用的STL库中，只有在 <em>vector</em> 和 <em>string</em> 中才能使用 <strong>vt.begin() + 3</strong> 这种迭代器加上整数的操作。</li></ul></blockquote></blockquote><h2 id="vector-常用函数实例解析"><a href="#vector-常用函数实例解析" class="headerlink" title="vector 常用函数实例解析"></a>vector 常用函数实例解析</h2><h3 id="1-push-back"><a href="#1-push-back" class="headerlink" title="(1)push_back()"></a>(1)push_back()</h3><blockquote><p>push_back就是在vector后面添加一个元素 x，时间复杂度为 **O(l)**。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; vt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">5</span>;i++)&#123;</span><br><span class="line">        vt.push_back(i); <span class="comment">//将元素1，2，3依次插入vt的末尾</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; vt.size();i++)&#123; <span class="comment">//size会得到 vt 容量的大小</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,vt[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果：  1  2  3  4  5;</p></blockquote><h3 id="2-pop-back"><a href="#2-pop-back" class="headerlink" title="(2)pop_back()"></a>(2)pop_back()</h3><blockquote><p>用来<strong>删除vector尾部</strong>的元素，时间复杂度为 O(l)。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; vt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">5</span>;i++)&#123;</span><br><span class="line">        vt.push_back(i); <span class="comment">//将元素1，2，3依次插入vt的末尾</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; vt.size();i++)&#123; <span class="comment">//size会得到 vt 容量的大小</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,vt[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    vt.pop_back();  <span class="comment">//将vt末尾的元素删除了</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; vt.size();i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,vt[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果为：<br>1  2  3  4  5<br>1  2  3  4</p></blockquote><h3 id="3-size"><a href="#3-size" class="headerlink" title="(3) size()"></a>(3) size()</h3><blockquote><p>用来获取vector中元素的个数,返回的是 <strong>unsigned</strong>类型的数据，时间复杂度为 O(l);</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; vt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">5</span>;i++)&#123;</span><br><span class="line">        vt.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,vt.size()); <span class="comment">//返回vt元素个数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果为：5</p></blockquote><h3 id="4-clear"><a href="#4-clear" class="headerlink" title="(4) clear()"></a>(4) clear()</h3><blockquote><p>清空vector中所有的元素，时间复杂度为 O(n),其中 <strong>n</strong>为vector中元素的个数</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; vt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">5</span>;i++)&#123;</span><br><span class="line">        vt.push_back(i); </span><br><span class="line">    &#125;</span><br><span class="line">    vt.clear(); <span class="comment">//清空了vt中的元素</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,vt.size());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-insert"><a href="#5-insert" class="headerlink" title="(5) insert()"></a>(5) insert()</h3><blockquote><p>**insert(it,i)**用来向任意迭代器中插入元素 <strong>i</strong>，时间复杂度为 O(n);</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; vt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">5</span>;i++)&#123;</span><br><span class="line">        vt.push_back(i); </span><br><span class="line">    &#125;</span><br><span class="line">    vt.insert(vt.begin() + <span class="number">2</span>, <span class="number">-1</span>); <span class="comment">//在第二位和第三位之间插入元素-1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; vt.size();i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,vt[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果为：  1  2 -1  3  4  5</p></blockquote><h4 id="6-erase"><a href="#6-erase" class="headerlink" title="(6) erase()"></a>(6) erase()</h4><blockquote><p>erase()用法有两种，一种是删除单个元素，另一种是删除一个区间内的所有元素</p><ul><li>erase(it) 意为删除迭代器 it 处的一个元素</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; vt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">5</span>;i++)&#123;</span><br><span class="line">        vt.push_back(i); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line">    it = vt.begin() + <span class="number">2</span>; <span class="comment">//it 指向了vector中的第三个元素 3</span></span><br><span class="line">    vt.erase(it); <span class="comment">//将 3 删除了</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; vt.size();i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,vt[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果为：  1  2  4  5；</p></blockquote><blockquote><ul><li><strong>erase(frist,last)</strong> 意为删除 <strong>[frist,last]</strong> 这个区间内的的所有元素</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; vt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">5</span>;i++)&#123;</span><br><span class="line">        vt.push_back(i); </span><br><span class="line">    &#125;</span><br><span class="line">    vt.erase(vt.begin(),vt.begin() + <span class="number">3</span>); <span class="comment">//将 1,2,3 删除了</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; vt.size();i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,vt[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果为：  4  5；</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++_STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set</title>
      <link href="/2022/08/11/Set/"/>
      <url>/2022/08/11/Set/</url>
      
        <content type="html"><![CDATA[<h1 id="Set的常见用法"><a href="#Set的常见用法" class="headerlink" title="Set的常见用法"></a>Set的常见用法</h1><blockquote><p><strong>set</strong> 是一个内部自动有序且不含重复元素的容器，如果需要使用 <strong>set</strong>需要加入头文件 #include &lt;*set*&gt;,还要再头文件下加上一段 <strong>using namespace std；</strong></p></blockquote><h2 id="1-Set的定义"><a href="#1-Set的定义" class="headerlink" title="1.Set的定义"></a>1.Set的定义</h2><blockquote><p>单独定义一个 <strong>set</strong>；</p><blockquote><ul><li><code>set &lt;typename&gt; name</code>;</li><li><code>set &lt;typename&gt; name[SIZE];  </code>&#x2F;&#x2F;name[0],name[1]都是一个set容器</li></ul></blockquote></blockquote><h2 id="2-set容器内元素的访问"><a href="#2-set容器内元素的访问" class="headerlink" title="2.set容器内元素的访问"></a>2.<strong>set</strong>容器内元素的访问</h2><blockquote><h2 id="set-只能通过迭代器访问元素"><a href="#set-只能通过迭代器访问元素" class="headerlink" title="set 只能通过迭代器访问元素"></a><strong>set</strong> <strong>只能通过迭代器访问元素</strong></h2><ul><li><code>set&lt;typename&gt;::iterator it;  </code>&#x2F;&#x2F; typename 指的是元素的类型例如：<strong>int</strong>，<strong>char</strong></li></ul></blockquote><h3 id="除了vector，string之外的STL容器都不支持-it-i-的访问方式"><a href="#除了vector，string之外的STL容器都不支持-it-i-的访问方式" class="headerlink" title="除了vector，string之外的STL容器都不支持 *(it + i) 的访问方式"></a>除了vector，string之外的STL容器都不支持 *(it + i) 的访问方式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">34</span>,<span class="number">21</span>,<span class="number">25</span>,<span class="number">67</span>,<span class="number">44</span>&#125;;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i++)&#123;</span><br><span class="line">        st.insert(arr[i]); <span class="comment">//将数组arr中的元素都插入了set容器中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="type">int</span>&gt;::iterator it = st.begin();</span><br><span class="line">    <span class="keyword">for</span>(;it != st.end();it++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,*it); <span class="comment">//元素都被从小到大排好序了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果为： 21 25 34 44 67</p></blockquote><h2 id="3-Set常用函数"><a href="#3-Set常用函数" class="headerlink" title="3.Set常用函数"></a>3.Set常用函数</h2><h3 id="1-insert"><a href="#1-insert" class="headerlink" title="(1) insert()"></a>(1) insert()</h3><blockquote><p>insert(x) 函数可以将 x 插入到 <strong>set</strong> 容器中<strong>并自动排序和去重</strong> ，时间复杂度为 O(logn) ,其中 n 为set中元素个数。</p></blockquote><h3 id="2-find"><a href="#2-find" class="headerlink" title="(2) find()"></a>(2) find()</h3><blockquote><p> <strong>find(value)</strong> 返回set中对应值为 <strong>value</strong> 的迭代器，找到对应元素的话返回对应元素的值的地址，找不到返回 <strong>st.end()</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">5</span>;i++)&#123;</span><br><span class="line">        st.insert(i); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,*(st.find(<span class="number">2</span>))); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果为：  2；</p></blockquote><h3 id="3-erase"><a href="#3-erase" class="headerlink" title="(3) erase()"></a>(3) erase()</h3><blockquote><p>erase()有两种使用方法：一种是删除 <strong>set</strong> 中的单个元素，另一种是删除 <strong>set</strong> 某一个区间内的函数， <strong>它们的参数均为元素的地址</strong>；</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">5</span>;i++)&#123;</span><br><span class="line">        st.insert(i); </span><br><span class="line">    &#125;</span><br><span class="line">    st.erase(<span class="number">2</span>); <span class="comment">//将容器中的元素 2 删除了</span></span><br><span class="line">    <span class="keyword">for</span>(it = st.begin();it != st.end();it++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,*it);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果为：  1  3  4  5；</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">5</span>;i++)&#123;</span><br><span class="line">        st.insert(i); </span><br><span class="line">    &#125;</span><br><span class="line">    st.erase(st.find(<span class="number">3</span>),st.end()); <span class="comment">//将容器中 3 - 5 的元素都删除了</span></span><br><span class="line">    <span class="keyword">for</span>(it = st.begin();it != st.end();it++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,*it);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-size"><a href="#4-size" class="headerlink" title="(4) size()"></a>(4) size()</h3><blockquote><p>size()函数用来获得元素内的个数，时间复杂度为 O(l)；</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">5</span>;i++)&#123;</span><br><span class="line">        st.insert(i); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,st.size()); <span class="comment">//size 获取 st 容量的元素个数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-clear"><a href="#5-clear" class="headerlink" title="(5) clear()"></a>(5) clear()</h3><blockquote><p>用来清空 <strong>set</strong> 中所有的元素</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">5</span>;i++)&#123;</span><br><span class="line">        st.insert(i); </span><br><span class="line">    &#125;</span><br><span class="line">    st.clear(); <span class="comment">//清空元素</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,st.size());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出元素为：0；</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++_STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithm</title>
      <link href="/2022/08/11/Algorithm/"/>
      <url>/2022/08/11/Algorithm/</url>
      
        <content type="html"><![CDATA[<h1 id="algorithm头文件下的常用函数"><a href="#algorithm头文件下的常用函数" class="headerlink" title="algorithm头文件下的常用函数"></a>algorithm头文件下的常用函数</h1><blockquote><h2 id="常用函数有以下几种："><a href="#常用函数有以下几种：" class="headerlink" title="常用函数有以下几种："></a>常用函数有以下几种：</h2><ul><li><strong><code>max(x,y)</code></strong> <strong>求两个数之中较大的那个</strong></li><li><strong><code>min(x,y)</code></strong> <strong>求两个数中较小的那个</strong></li><li><strong><code>abs(x)</code></strong> <strong>返回一个整数的绝对值</strong><br><strong>这三种函数的使用样例如下：</strong></li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">-5</span>;</span><br><span class="line">    <span class="type">int</span> m = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; max(n,m) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; min(n,m) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">abs</span>(n) &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">abs</span>(m) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果为：<br>2<br>-5<br>5 2</p></blockquote><hr><blockquote><ul><li><strong><code>swap(x,y)</code></strong> <strong>交换两个变量的值</strong></li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">-5</span>;</span><br><span class="line">    <span class="type">int</span> m = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; m &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    swap(n,m); <span class="comment">//将 n 和 m 的值互换了</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; m &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果为：<br>-5 2<br>2 -5</p></blockquote><hr><blockquote><ul><li><strong>reverse(it,it2)</strong> <strong>reverse(it,it2)  可以将数组指针在[it,it1)之间的元素或迭代器在[it,it1)范围内的元素进行反转。也可以对容器中的元素进行这样的操作例如：string</strong></li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;; <span class="comment">//</span></span><br><span class="line">    reverse(arr,arr + <span class="number">2</span>); <span class="comment">//将[arr,arr + 2)范围内的元素进行了反转</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i++) </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果为：<br>2 1 3 4 5</p></blockquote><hr><blockquote><ul><li><strong><code>next-permutation()</code></strong> <strong>给出一个序列在全排列下的下一个序列</strong></li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>,arr[<span class="number">0</span>],arr[<span class="number">1</span>],arr[<span class="number">2</span>]);</span><br><span class="line">    &#125;<span class="keyword">while</span>(next_permutation(arr,arr+<span class="number">3</span>)); <span class="comment">//将数组前三位赋值成了全排列中的下一列</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果为：<br>1 3 2<br>2 1 3<br>2 3 1<br>3 1 2<br>3 2 1</p></blockquote><hr><blockquote><ul><li><strong><code>fill()</code></strong> <strong>可以把数组或容器中的某一段区域赋为一个相同的值</strong></li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">5</span>];</span><br><span class="line">    fill(arr,arr+<span class="number">5</span>,<span class="number">250</span>); <span class="comment">//将所有值都赋为250</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果为：<br>250<br>250<br>250<br>250<br>250</p></blockquote><hr><blockquote><ul><li><strong><code>sort()</code></strong> <strong>它能够根据不同情况使用不同的排序方法效率较高，sort(首元素地址，尾元素地址的下一个地址，comp比较函数 (<code>非必填</code>) ),没有比较函数，那么sort函数默认是从小到大排序的</strong></li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">24</span>,<span class="number">11</span>,<span class="number">67</span>,<span class="number">43</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    sort(arr,arr + <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i++) </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果为：<br>5 11 24 43 67</p></blockquote><blockquote><p> <strong>sort函数中的参数对double，(字典序排列)char类型的变量都同样适用，下面是compare比较函数的代码样例</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b; <span class="comment">//从大到小排序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">24</span>,<span class="number">11</span>,<span class="number">67</span>,<span class="number">43</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    sort(arr,arr + <span class="number">5</span>,compare);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i++) </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果为：<br>67 43 24 11 5</p></blockquote><hr><blockquote><ul><li><strong><code>lower_bound(frist,last,val)</code></strong> <strong>用来寻找在数组或容器[frist,last)范围内第一个值大于等于</strong> <strong>val</strong> <strong>的元素的位置</strong></li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> search = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; lower_bound(arr,arr + <span class="number">5</span>,search) - arr; <span class="comment">//函数返回找到的元素地址，减去arr就是数组下标</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//没找到的话会返回所要找元素如果存在应该在的位置处的指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果为：<br>2</p></blockquote><hr><blockquote><ul><li><strong><code>upper_bound(frist,last,val)</code></strong> <strong>用来寻找在数组或容器[frist,last)范围内第一个值大于</strong> <strong>val</strong> <strong>的元素的位置</strong></li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> search = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; upper_bound(arr,arr + <span class="number">5</span>,search) - arr; <span class="comment">//函数返回找到的元素地址，减去arr就是数组下标</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//没找到的话会返回所要找元素如果存在应该在的位置处的指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果为：<br>3</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++_STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>newpage</title>
      <link href="/2022/08/11/newpage/"/>
      <url>/2022/08/11/newpage/</url>
      
        <content type="html"><![CDATA[<h1 id="first"><a href="#first" class="headerlink" title="first"></a>first</h1><h2 id="second"><a href="#second" class="headerlink" title="second"></a>second</h2><h3 id="third"><a href="#third" class="headerlink" title="third"></a>third</h3><blockquote><p>some context</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/11/hello-world/"/>
      <url>/2022/08/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
